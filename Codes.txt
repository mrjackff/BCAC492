Assignment 1
Write a C program to construct line, circle, arc, ellipse, rectangle.
#include <stdio.h>
#include <graphics.h>
#include <conio.h>
int main() {
    int gd, gm;
    detectgraph(&gm, &gd);
    initgraph(&gm, &gd, "C:\\TC\\BGI");
    printf("\n\n\n\n\n\n LINE");
    line(120, 100, 215, 100);
    printf("\n\n RECTANGLE");
    rectangle(120, 115, 215, 165);
    printf("\n\n\n\n\n ARC");
    arc(120, 200, 180, 0, 30);
    printf("\n\n\n CIRCLE");
    circle(120, 270, 30);
    printf("\n\n\n\n\n ELLIPSE");
    ellipse(120, 350, 0, 360, 30, 20);
    getch();
    closegraph();
}

Assignment 2
Write a C program to draw a cartoon.
#include <stdio.h>
#include <graphics.h>
#include <conio.h>
int main() {
    int gd, gm;
    detectgraph(&gm, &gd);
    initgraph(&gm, &gd, "C:\\TC\\BGI");
    circle(300, 200, 100);
    arc(210, 110, 0, 270, 40);
    arc(390, 110, 270, 180, 40);
    arc(210, 110, 0, 270, 35);
    arc(390, 110, 270, 180, 35);
    circle(255, 170, 20);
    circle(345, 170, 20);
    circle(255, 175, 7);
    line(300, 200, 280, 230);
    line(300, 200, 320, 230);
    line(280, 230, 320, 230);
    arc(300, 220, 200, 340, 50);
    arc(300, 250, 200, 340, 70);
    circle(345, 175, 7);
    getch();
    closegraph();
}

Assignment 3
Write a C program for DDA line drawing algorithm.
#include <stdio.h>
#include <graphics.h>
#include <math.h>
#include <dos.h>
#include <conio.h>
int main() {
    float x, y, x1, y1, x2, y2, dx, dy, length;
    int i, gd, gm;
    printf("Enter the first value of x1: ");
    scanf("%f", &x1);
    printf("Enter the first value of y1: ");
    scanf("%f", &y1);
    printf("Enter the first value of x2: ");
    scanf("%f", &x2);
    printf("Enter the first value of y2: ");
    scanf("%f", &y2);
    detectgraph(&gd, &gm);
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    dx = abs(x2 - x1);
    dy = abs(y2 - y1);
    if (dx >= dy) {
        length = dx;
    }
    else {
        length = dy;
    }
    dx = (x2 - x1) / length;
    dy = (y2 - y1) / length;
    x = x1 + 0.5;
    y = y1 + 0.5;
    i = 1;
    while (i <= length) {
        putpixel(x, y, 15);
        x = x + dx;
        y = y + dy;
        i = i + 1;
        delay(100);
    }
    getch();
    closegraph();
}

Assignment 4
Write a C program to draw a moving cycle.
#include <stdio.h>
#include <math.h>
#include <graphics.h>
#include <dos.h>
#include <conio.h>
int main() {
    int gd, gm, i, a;
    detectgraph(&gd, &gm);
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    for (i = 0; i < 600; i++) {
        line(50 + i, 405, 100 + i, 405);
        line(75 + i, 375, 125 + i, 375);
        line(50 + i, 405, 75 + i, 375);
        line(100 + i, 405, 125 + i, 375);
        line(150 + i, 405, 115 + i, 365);
        line(75 + i, 365, 75 + i, 375);
        line(70 + i, 365, 80 + i, 365);
        line(100 + i, 365, 115 + i, 365);
        circle(150 + i, 405, 30);
        circle(50 + i, 405, 30);
        line(0, 436, getmaxx(), 436);
        rectangle(getmaxx() - i, 436, 650 - i, 431);
        delay(30);
        cleardevice();
    }
    getch();
    closegraph();
}

Assignment 5
Write a C program for Breshenham's line drawing algorithm.
#include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <dos.h>
#include <math.h>
int main() {
    float x, y, x1, y1, x2, y2, dx, dy, e;
    int i, gd, gm;
    printf("Enter the first value of x1: ");
    scanf("%f", &x1);
    printf("Enter the first value of y1: ");
    scanf("%f", &y1);
    printf("Enter the first value of x2: ");
    scanf("%f", &x2);
    printf("Enter the first value of y2: ");
    scanf("%f", &y2);
    detectgraph(&gd, &gm);
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    x = x1;
    y = y1;
    dx = abs(x2 - x1);
    dy = abs(y2 - y1);
    e = 2 * dy - dx;
    i = 1;
    do {
        putpixel(x, y, 15);
        while (e >= 0) {
            y = y + 1;
            e = e - 2 * dx;
        }
        x = x + 1;
        e = e + 2 * dy;
        i = i + 1;
        delay(100);
    } while (i <= dx);
    getch();
    closegraph();
}

Assignment 6
Write a C program to draw a traffic light simulation using computer graphics.
#include <conio.h>
#include <dos.h>
#include <graphics.h>
#include <stdlib.h>
int main() {
    int gd = DETECT, gm, midx, midy;
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    midx = getmaxx() / 2;
    midy = getmaxy() / 2;
    setcolor(CYAN);
    settextstyle(TRIPLEX_FONT, HORIZ_DIR, 4);
    settextjustify(CENTER_TEXT, CENTER_TEXT);
    outtextxy(midx, midy - 10, "TRAFFIC LIGHT SIMULATION");
    outtextxy(midx, midy + 15, "PRESS ANY KEY TO START");
    getch();
    cleardevice();
    setcolor(WHITE);
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 1);
    rectangle(midx - 30, midy - 80, midx + 30, midy + 80);
    circle(midx, midy - 53, 22);
    setfillstyle(SOLID_FILL, RED);
    floodfill(midx, midy - 53, WHITE);
    setcolor(BLACK);
    outtextxy(midx, midy - 52, "STOP");
    delay(2000);
    graphdefaults();
    cleardevice();
    setcolor(WHITE);
    rectangle(midx - 30, midy - 80, midx + 30, midy + 80);
    circle(midx, midy + 1, 22);
    setfillstyle(SOLID_FILL, YELLOW);
    floodfill(midx, midy + 1, WHITE);
    setcolor(BLACK);
    outtextxy(midx - 20, midy - 2, "READY");
    delay(2000);
    cleardevice();
    setcolor(WHITE);
    rectangle(midx - 30, midy - 80, midx + 30, midy + 80);
    circle(midx, midy + 50, 22);
    setfillstyle(SOLID_FILL, GREEN);
    floodfill(midx, midy + 50, WHITE);
    setcolor(BLACK);
    outtextxy(midx - 8, midy + 48, "GO");
    setcolor(RED);
    settextstyle(TRIPLEX_FONT, HORIZ_DIR, 4);
    outtextxy(midx - 50, midy + 100, "Broom");
    getch();
}

Assignment 7
Write a C program for Mid-Point circle algorithm.
#include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <math.h>
#include <dos.h>
int main() {
    float p;
    int i, gd, gm, x, y, r;
    clrscr();
    printf("Enter the radius: ");
    scanf("%d", &r);
    detectgraph(&gd, &gm);
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    x = 0;
    y = r;
    p = 1.25 - r;
    do {
        putpixel(200 + x, 200 + y, 15);
        putpixel(200 + y, 200 + x, 15);
        putpixel(200 + x, 200 - y, 15);
        putpixel(200 + y, 200 - x, 15);
        putpixel(200 - x, 200 - y, 15);
        putpixel(200 - x, 200 + y, 15);
        putpixel(200 - y, 200 + x, 15);
        putpixel(200 - y, 200 - x, 15);
        if (p < 0) {
            x = x + 1;
            y = y;
            p = p + 2 * x + 2;
        }
        else {
            x = x + 1;
            y = y - 1;
            p = p + 2 * (x - y) + 1;
        }
        delay(10);
    } while (x < y);
    getch();
    closegraph();
}

Assignment 8
Write a C program to create a concentric circle.
#include <stdio.h>
#include <graphics.h>
#include <conio.h>
#include <math.h>
#include <dos.h>
int main() {
    int gd = DETECT, gm;
    int x = 320, y = 240, radius;
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    outtextxy(260, 80, "Concentric Circle");
    for (radius = 25; radius <= 125; radius = radius + 20) {
        circle(x, y, radius);
    }
    getch();
    closegraph();
}

Assignment 9
Write a C program for Bresenham's circle algorithm.
#include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <math.h>
#include <dos.h>
int main() {
    float d;
    int gd, gm, x, y, r;
    clrscr();
    printf("Enter the radius: ");
    scanf("%d", &r);
    detectgraph(&gd, &gm);
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    x = 0;
    y = r;
    d = 3 - (2 * r);
    do {
        putpixel(200 + x, 200 + y, 14);
        putpixel(200 + y, 200 + x, 13);
        putpixel(200 + y, 200 - x, 12);
        putpixel(200 + x, 200 - y, 11);
        putpixel(200 - x, 200 - y, 10);
        putpixel(200 - y, 200 - x, 9);
        putpixel(200 - y, 200 + x, 8);
        putpixel(200 - x, 200 + y, 7);
        if (d <= 0) {
            d = d + (4 * x) + 6;
        }
        else {
            d = d + (4 * (x - y)) + 10;
            y = y - 1;
        }
        x = x + 1;
        delay(10);
    } while (x < y);
    getch();
    closegraph();
}

Assignment 10
Write a C program for Mid-point Ellipse drawing algorithm.
#include <stdio.h>
#include <conio.h>
#include <graphics.h>
int main() {
    int rx, ry, x, y, gd, gm;
    float p, dy, dx;
    clrscr();
    printf("Enter the rx: ");
    scanf("%d", &rx);
    printf("Enter the ry: ");
    scanf("%d", &ry);
    detectgraph(&gd, &gm);
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    x = 0;
    y = ry;
    p = ry*ry - rx*rx * ry + 1/4 * rx*rx;
    dx = 2 * ry*ry * x;
    dy = 2 * rx*rx * y;
    while (dx < dy) {
        putpixel(x + getmaxx()/2, getmaxy()/2 - y, WHITE);
        putpixel(-x + getmaxx()/2, getmaxy()/2 - y, WHITE);
        putpixel(x + getmaxx()/2, getmaxy()/2 + y, WHITE);
        putpixel(-x + getmaxx()/2, getmaxy()/2 +y, WHITE);
        if (p < 0) {
            x++;
            dx = 2 * ry*ry * x; //update dx
            p = p + 2 * ry*ry * x + ry*ry;
        }
        else {
            x++;
            y--;
            dx = 2 * ry*ry * x; //update dx
            dy = 2 * rx*rx * y; //update dy
            p = p + dx - dy + ry*ry;
        }
    }
    if (dx >= dy) {
        p = ry*ry * (x+1/2)*(x+1/2) + rx*rx * (y-1)*(y-1) - rx*rx * ry*ry;
        while (y > 0) {
            putpixel(x + getmaxx()/2, getmaxy()/2 - y, WHITE);
            putpixel(-x + getmaxx()/2, getmaxy()/2 - y, WHITE);
            putpixel(x + getmaxx()/2, getmaxy()/2 + y, WHITE);
            putpixel(-x + getmaxx()/2, getmaxy()/2 + y, WHITE);
            if (p > 0) {
                y--;
                dy = 2 * rx*rx * y; //update dy
                p = p - dy + rx*rx;
            }
            else {
                x++;
                y--;
                dy = dy - 2 * rx*rx;
                dx = dx + 2 * ry*ry;
                p = p + dx - dy + rx*rx;
            }
        }
    }
    getch();
    closegraph();
}

Assignment 11
1. Write a C program for Boundary fill algo.
#include <stdio.h>
#include <graphics.h>
#include <conio.h>
#include <dos.h>

int boundaryfill(int x, int y, int fill_color, int boundary_color) {
    if (getpixel(x, y) != boundary_color && getpixel(x, y) != fill_color) {
        putpixel(x, y, fill_color);
        boundaryfill(x + 1, y, fill_color, boundary_color);
        boundaryfill(x - 1, y, fill_color, boundary_color);
        boundaryfill(x, y + 1, fill_color, boundary_color);
        boundaryfill(x, y - 1, fill_color, boundary_color);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    int left = 200;
    int top = 200;
    int right = 400;
    int bottom = 400;
    rectangle(left, top, right, bottom);
    int fill_color = BLUE;
    int boundary_color = WHITE;
    int i = left + 1;
    int j = top + 1;
    boundaryfill(i, j, fill_color, boundary_color);
    getch();
    closegraph();
    return 0;
}


2. Write a C program for Flood fill algo.
#include <stdio.h>
#include <graphics.h>
#include <conio.h>
#include <dos.h>

int floodFill(int x, int y, int fillcolor, int previouscolor) {
    if (getpixel(x, y) == previouscolor) {
        putpixel(x, y, fillcolor);
        floodFill(x + 1, y, fillcolor, previouscolor);
        floodFill(x - 1, y, fillcolor, previouscolor);
        floodFill(x, y + 1, fillcolor, previouscolor);
        floodFill(x, y - 1, fillcolor, previouscolor);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    int x1 = 200;
    int y1 = 200;
    int x2 = 400;
    int y2 = 400;
    rectangle(x1, y1, x2, y2);
    int fillcolor = GREEN;
    int previouscolor = getpixel((x1 + x2) / 2, (y1 + y2) / 2);
    floodFill((x1 + x2) / 2, (y1 + y2) / 2, fillcolor, previouscolor);
    delay(100);
    closegraph();
    return 0;
}

Assignment 12
Write a C program for 2D object translation.
#include <stdio.h>
#include <graphics.h>
#include <conio.h>
#include <process.h>
#include <math.h>

int RectAngle(int x, int y, int Height, int Width);
int Translate(int x, int y, int Height, int Width);

int main() {
    int gd = DETECT, gm;
    int x, y, Height, Width;
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    printf("Enter the first point of the rectangle: ");
    scanf("%d %d", &x, &y);
    printf("Enter the height & width of the rectangle: ");
    scanf("%d %d", &Height, &Width);
    RectAngle(x, y, Height, Width);
    getch();
    cleardevice();
    Translate(x, y, Height, Width);
    RectAngle(x, y, Height, Width);
    getch();
    return 0;
}

int RectAngle(int x, int y, int Height, int Width) {
    line(x, y, x + Width, y);
    line(x, y, x, y + Height);
    line(x + Width, y, x + Width, y + Height);
    line(x, y + Height, x + Width, y + Height);
}

int Translate(int x, int y, int Height, int Width) {
    int Newx, Newy, a, b;
    printf("Enter the translation coordinates: ");
    scanf("%d %d", &Newx, &Newy);
    cleardevice();
    a = x + Newx;
    b = y + Newy;
    RectAngle(a, b, Height, Width);
}

Assignment 13
Write a C program for 2D object rotation.
#include <stdio.h>
#include <graphics.h>
#include <conio.h>
#include <math.h>

int DrawTriangle(int x1, int y1, int x2, int y2, int x3, int y3);
int RotateTriangle(int x1, int y1, int x2, int y2, int x3, int y3, float angle);

int main() {
    int gd = DETECT, gm;
    int x1, y1, x2, y2, x3, y3;
    float angle;
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    printf("Enter the 1st point for the triangle (x1 y1): ");
    scanf("%d%d", &x1, &y1);
    printf("Enter the 2nd point for the triangle (x2 y2): ");
    scanf("%d%d", &x2, &y2);
    printf("Enter the 3rd point for the triangle (x3 y3): ");
    scanf("%d%d", &x3, &y3);
    DrawTriangle(x1, y1, x2, y2, x3, y3);
    printf("Enter the angle for rotation (in degrees): ");
    scanf("%f", &angle);
    RotateTriangle(x1, y1, x2, y2, x3, y3, angle);
    getch();
    closegraph();
    return 0;
}

int DrawTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {
    line(x1, y1, x2, y2);
    line(x2, y2, x3, y3);
    line(x3, y3, x1, y1);
}

int RotateTriangle(int x1, int y1, int x2, int y2, int x3, int y3, float angle) {
    int p = x2, q = y2;
    float radianAngle = (angle * 3.14)/180.0;
    int a1 = p + (x1 - p) * cos(radianAngle) - (y1 - q) * sin(radianAngle);
    int b1 = q + (x1 - p) * sin(radianAngle) + (y1 - q) * cos(radianAngle);
    int a2 = p + (x2 - p) * cos(radianAngle) - (y2 - q) * sin(radianAngle);
    int b2 = q + (x2 - p) * sin(radianAngle) + (y2 - q) * cos(radianAngle);
    int a3 = p + (x3 - p) * cos(radianAngle) - (y3 - q) * sin(radianAngle);
    int b3 = q + (x3 - p) * sin(radianAngle) + (y3 - q) * cos(radianAngle);
    setcolor(1);
    DrawTriangle(a1, b1, a2, b2, a3, b3);
}

Assignment 14
Write a C program for 2D object scaling.
#include <stdio.h>
#include <graphics.h>
#include <conio.h>
#include <process.h>
#include <math.h>

int x1, y1, x2, y2, x3, y3;
int draw();
int scale();

int main() {
    int gd = DETECT, gm;
    int c;
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    printf("Enter the 1st point for the triangle: ");
    scanf("%d %d", &x1, &y1);
    printf("Enter the 2nd point for the triangle: ");
    scanf("%d %d", &x2, &y2);
    printf("Enter the 3rd point for the triangle: ");
    scanf("%d %d", &x3, &y3);
    draw();
    scale();
    return 0;
}

int draw() {
    line(x1, y1, x2, y2);
    line(x2, y2, x3, y3);
    line(x3, y3, x1, y1);
}

int scale() {
    int x, y;
    int mx, my;
    printf("Enter the scaling factors (x y): ");
    scanf("%d %d", &x, &y);
    mx = (x1 + x2 + x3) / 3;
    my = (y1 + y2 + y3) / 3;
    cleardevice();
    int a1, a2, a3, b1, b2, b3;
    a1 = mx + (x1 - mx) * x;
    b1 = my + (y1 - my) * y;
    a2 = mx + (x2 - mx) * x;
    b2 = my + (y2 - my) * y;
    a3 = mx + (x3 - mx) * x;
    b3 = my + (y3 - my) * y;
    line(a1, b1, a2, b2);
    line(a2, b2, a3, b3);
    line(a3, b3, a1, b1);
    draw();
    getch();
}

Assignment 15
Write a C program for Cohen Sutherland line clipping algorithm.
#include <stdio.h>
#include <stdlib.h>
#include <graphics.h>
#include <math.h>
#include <dos.h>

typedef struct coordinate {
    int x, y;
    char code[4];
} PT;

int drawwindow();
int drawline(PT p1, PT p2);
PT setcode(PT p);
int visibility(PT p1, PT p2);
PT resetendpt(PT p1, PT p2);

int main() {
    int gd = DETECT, v, gm;
    PT p1, p2, p3, p4, ptemp;
    printf("\nEnter x1 and y1\n");
    scanf("%d %d", &p1.x, &p1.y);
    printf("\nEnter x2 and y2\n");
    scanf("%d %d", &p2.x, &p2.y);
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    drawwindow();
    delay(500);
    drawline(p1, p2);
    delay(2000);
    cleardevice();
    delay(500);
    p1 = setcode(p1);
    p2 = setcode(p2);
    v = visibility(p1, p2);
    delay(500);
    switch (v) {
    case 0:
        drawwindow();
        delay(500);
        drawline(p1, p2);
        break;
    case 1:
        drawwindow();
        delay(500);
        break;
    case 2:
        p3 = resetendpt(p1, p2);
        p4 = resetendpt(p2, p1);
        drawwindow();
        delay(500);
        drawline(p3, p4);
        break;
    }
    delay(5000);
    closegraph();
    return 0;
}

int drawwindow() {
    line(150, 100, 450, 100);
    line(450, 100, 450, 350);
    line(450, 350, 150, 350);
    line(150, 350, 150, 100);
}

int drawline(PT p1, PT p2) {
    line(p1.x, p1.y, p2.x, p2.y);
}

PT setcode(PT p) {
    PT ptemp;
    if (p.y < 100) {
        ptemp.code[0] = '1';
    }
    else {
        ptemp.code[0] = '0';
    }
    if (p.y > 350) {
        ptemp.code[1] = '1';
    }
    else {
        ptemp.code[1] = '0';
    }
    if (p.x > 450) {
        ptemp.code[2] = '1';
    }
    else {
        ptemp.code[2] = '0';
    }
    if (p.x < 150) {
        ptemp.code[3] = '1';
    }
    else {
        ptemp.code[3] = '0';
    }
    ptemp.x = p.x;
    ptemp.y = p.y;
    return (ptemp);
}

int visibility(PT p1, PT p2) {
    int i, flag = 0;
    for (i = 0; i < 4; i++) {
        if ((p1.code[i] != '0') || (p2.code[i] != '0')) {
            flag = 1;
        }
    }
    if (flag == 0) {
        return (0);
    }
    for (i = 0; i < 4; i++) {
        if ((p1.code[i] == p2.code[i]) && (p1.code[i] == '1')) {
            flag = '0';
        }
    }
    if (flag == 0) {
        return (1);
    }
    return (2);
}

PT resetendpt(PT p1, PT p2) {
    PT temp;
    int x, y, i;
    float m, k;
    if (p1.code[3] == '1') {
        x = 150;
    }
    if (p1.code[2] == '1') {
        x = 450;
    }
    if ((p1.code[3] == '1') || (p1.code[2] == '1')) {
        m = (float)(p2.y - p1.y) / (p2.x - p1.x);
        k = (p1.y + (m * (x - p1.x)));
        temp.y = k;
        temp.x = x;
        for (i = 0; i < 4; i++) {
            temp.code[i] = p1.code[i];
        }
        if (temp.y <= 350 && temp.y >= 100) {
            return (temp);
        }
    }
    if (p1.code[0] == '1') {
        y = 100;
    }
    if (p1.code[1] == '1') {
        y = 350;
    }
    if ((p1.code[0] == '1') || (p1.code[1] == '1')) {
        m = (float)(p2.y - p1.y) / (p2.x - p1.x);
        k = (float)p1.x + (float)(y - p1.y) / m;
        temp.x = k;
        temp.y = y;
        for (i = 0; i < 4; i++) {
            temp.code[i] = p1.code[i];
        }
        return (temp);
    }
    else {
        return (p1);
    }
}
